{"mappings":"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","sources":["<anon>","src/js/justForFun/blackJack.js"],"sourcesContent":["const playbtn = document.querySelector(\".play-button\");\nconst playerCardList = document.querySelector(\".player-card-list\");\nconst dealerCardList = document.querySelector(\".dealer-card-list\");\nconst playerScore = document.querySelector(\".player-score\");\nconst dealerScore = document.querySelector(\".dealer-score\");\nconst currentBalance = document.querySelector(\".balance\");\nconst currentBet = document.querySelector(\".current-bet\");\nconst suits = [\n    \"\\u2660\",\n    \"\\u2665\",\n    \"\\u2666\",\n    \"\\u2663\"\n];\n//const values = [\"10\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\"];\nconst values = [\n    \"2\",\n    \"3\",\n    \"4\",\n    \"5\",\n    \"6\",\n    \"7\",\n    \"8\",\n    \"9\",\n    \"10\",\n    \"J\",\n    \"Q\",\n    \"K\",\n    \"A\"\n];\nfunction createDeck() {\n    let numberOfDecks = 6;\n    let deck = [];\n    for(let i = 0; i < values.length; i++)for(let j = 0; j < suits.length; j++){\n        let weight = parseInt(values[i]);\n        if (values[i] == \"J\" || values[i] == \"Q\" || values[i] == \"K\") weight = 10;\n        if (values[i] == \"A\") weight = 11;\n        var card1 = {\n            Value: values[i],\n            Suit: suits[j],\n            Weight: weight\n        };\n        for(let k = 0; k < numberOfDecks; k++)deck.push(card1);\n    }\n    deck = shuffleDeck(deck);\n    alert(\"\\uC154\\uD50C\\uD558\\uACA0\\uC2B5\\uB2C8\\uB2E4\");\n    return deck;\n}\nfunction shuffleDeck(deck) {\n    let shuffledDeck = [\n        ...deck\n    ];\n    for(let i = shuffledDeck.length - 1; i > 0; i--){\n        const j = Math.floor(Math.random() * (i + 1));\n        [shuffledDeck[i], shuffledDeck[j]] = [\n            shuffledDeck[j],\n            shuffledDeck[i]\n        ];\n    }\n    return shuffledDeck;\n}\nlet playing = false;\ndocument.querySelector(\".play-button\").addEventListener(\"click\", startGame);\ndocument.querySelector(\".blackjack-start\").addEventListener(\"click\", startBlackJack);\ndocument.getElementById(\"stay\").addEventListener(\"click\", dealerTurn);\ndocument.getElementById(\"hit\").addEventListener(\"click\", playerHit);\ndocument.querySelector(\"#plus-5\").addEventListener(\"click\", plusBet);\ndocument.querySelector(\"#plus-50\").addEventListener(\"click\", plusBet);\ndocument.querySelector(\"#plus-500\").addEventListener(\"click\", plusBet);\ndocument.querySelector(\"#minus-5\").addEventListener(\"click\", minusBet);\ndocument.querySelector(\"#minus-50\").addEventListener(\"click\", minusBet);\ndocument.querySelector(\"#minus-500\").addEventListener(\"click\", minusBet);\ndocument.querySelector(\".restart-button\").addEventListener(\"click\", restartGame);\ndocument.querySelector(\"#double\").addEventListener(\"click\", doubleBet);\ndocument.querySelector(\"#hogu\").addEventListener(\"click\", begging);\nlet deck = [];\nlet playerCards = [];\nlet dealerCards = [];\nfunction startGame() {\n    deck = createDeck();\n    playbtn.classList.add(\"hidden\");\n    playing = true;\n    game();\n    document.querySelector(\".bet-controller\").classList.toggle(\"hidden\");\n}\nfunction game() {\n    bet();\n}\nfunction bet() {\n    document.querySelector(\".blackjack-start\").classList.toggle(\"hidden\");\n}\nfunction startBlackJack() {\n    document.querySelector(\".rules\").classList.toggle(\"hidden\");\n    document.querySelector(\".blackjack-start\").classList.toggle(\"hidden\");\n    document.querySelector(\".bet-controller\").classList.toggle(\"hidden\");\n    document.querySelector(\".game-controller\").classList.toggle(\"hidden\");\n    document.querySelector(\".player-card-display\").classList.toggle(\"hidden\");\n    initialCard();\n}\nfunction initialCard() {\n    document.querySelector(\".dealer-card-display\").classList.toggle(\"hidden\");\n    if (deck.length < 50) deck = createDeck();\n    hitCard(playerCards, playerCardList, playerScore);\n    updateScore(playerScore, playerCardList);\n    hitCard(playerCards, playerCardList, playerScore);\n    updateScore(playerScore, playerCardList);\n    hitCard(dealerCards, dealerCardList, dealerScore);\n    updateScore(dealerScore, dealerCardList);\n    if (checkBlackJack(playerCardList)) setTimeout(checkResults(true), 500);\n}\nfunction renderCard(card1, hand) {\n    hand.appendChild(getCardUI(card1));\n}\nfunction getCardUI(card1) {\n    let el = document.createElement(\"div\");\n    el.className = \"card\";\n    let suit = document.createElement(\"div\");\n    suit.textContent = card1.Suit;\n    el.appendChild(suit);\n    let value = document.createElement(\"div\");\n    value.textContent = card1.Value;\n    value.className = \"value\";\n    el.appendChild(value);\n    let weight = document.createElement(\"div\");\n    weight.textContent = card1.Weight;\n    weight.className = \"weight\";\n    weight.classList.add(\"hidden\");\n    el.appendChild(weight);\n    if (card1.Suit === \"\\u2666\" || card1.Suit === \"\\u2665\") el.classList.add(\"red-suit\");\n    return el;\n}\nfunction hitCard(playercards, playerlist, playerScore) {\n    let newCard = deck.pop();\n    if (parseInt(newCard.Weight) + calculateCardWeight(playerlist) > 21) {\n        let foundAceCard;\n        cards = playerlist.querySelectorAll(\".card\");\n        for (card of cards)if (card.querySelector(\".weight\").textContent == \"11\") foundAceCard = card;\n        if (foundAceCard) foundAceCard.querySelector(\".weight\").textContent = 1;\n        if (!foundAceCard && newCard.Weight == 11) newCard.Weight = 1;\n    }\n    playercards.push(newCard);\n    renderCard(newCard, playerlist);\n}\nfunction updateScore(playerScore, cardList) {\n    let score = 0;\n    score = calculateCardWeight(cardList);\n    playerScore.textContent = score;\n}\nfunction playerHit() {\n    hitCard(playerCards, playerCardList, playerScore);\n    updateScore(playerScore, playerCardList);\n    if (parseInt(playerScore.textContent) > 21) setTimeout(500, checkResults());\n}\nasync function dealerTurn() {\n    async function takeTurn() {\n        if (parseInt(dealerScore.textContent) >= 17 || parseInt(playerScore.textContent) > 21) return true;\n        hitCard(dealerCards, dealerCardList, dealerScore);\n        updateScore(dealerScore, dealerCardList);\n        await new Promise((resolve)=>setTimeout(resolve, 1000));\n        await takeTurn();\n    }\n    await takeTurn();\n    checkResults();\n}\nfunction checkResults(isBlackJack = false) {\n    document.querySelector(\".game-controller\").classList.toggle(\"hidden\");\n    if (isBlackJack) setTimeout(playerBlackJack, 500);\n    else if (parseInt(playerScore.textContent) > 21) setTimeout(dealerWin, 500);\n    else if (parseInt(dealerScore.textContent) > 21 || parseInt(dealerScore.textContent) < parseInt(playerScore.textContent)) setTimeout(playerWin, 500);\n    else if (parseInt(dealerScore.textContent) === parseInt(playerScore.textContent)) setTimeout(itsAPush, 500);\n    else setTimeout(dealerWin, 500);\n    setTimeout(resetGame, 1000);\n}\nfunction playerWin() {\n    let prizeMoney = parseInt(currentBet.textContent);\n    let balance = parseInt(currentBalance.textContent);\n    balance += prizeMoney * 2;\n    currentBalance.textContent = balance;\n    alert(\"YOU WIN!\\n\\uC6B4\\uC774 \\uC88B\\uAD70\\uC694?\");\n}\nfunction dealerWin() {\n    alert(\"YOU LOSE\\n\\uBE14\\uB799\\uC7AD\\uC740 '\\uC2E4\\uB825\\uAC8C\\uC784' \\uC785\\uB2C8\\uB2E4\");\n}\nfunction itsAPush() {\n    let prizeMoney = parseInt(currentBet.textContent);\n    let balance = parseInt(currentBalance.textContent);\n    balance += prizeMoney;\n    currentBalance.textContent = balance;\n    alert(\"PUSH(\\uBB34\\uC2B9\\uBD80)\\n\\uB180\\uB77C\\uC168\\uB098\\uC694?\");\n}\nfunction resetGame() {\n    document.querySelector(\".player-card-display\").classList.toggle(\"hidden\");\n    document.querySelector(\".dealer-card-display\").classList.toggle(\"hidden\");\n    document.querySelector(\".restart-button\").classList.toggle(\"hidden\");\n    currentBet.textContent = 0;\n    playerScore.textContent = 0;\n    dealerScore.textContent = 0;\n    while(playerCardList.firstChild)playerCardList.removeChild(playerCardList.firstChild);\n    while(dealerCardList.firstChild)dealerCardList.removeChild(dealerCardList.firstChild);\n    playerCards = [];\n    dealerCards = [];\n}\nfunction plusBet(event) {\n    const button = event.target;\n    let balance = parseInt(currentBalance.textContent);\n    let plusValue = parseInt(button.textContent.replace(\"+\", \"\"));\n    let betValue = parseInt(currentBet.textContent);\n    if (balance < plusValue) {\n        alert(\"\\uBCA0\\uD305 \\uAE08\\uC561\\uC774 \\uBD80\\uC871\\uD569\\uB2C8\\uB2E4\\n\\uC0B0\\uC640 \\uC0B0\\uC640 \\uC0B0\\uC640\\uBA38\\uB2C8~\");\n        return;\n    }\n    balance -= plusValue;\n    betValue += plusValue;\n    currentBalance.textContent = balance;\n    currentBet.textContent = betValue;\n}\nfunction minusBet(event) {\n    const button = event.target;\n    let balance = parseInt(currentBalance.textContent);\n    let minusValue = parseInt(button.textContent);\n    let betValue = parseInt(currentBet.textContent);\n    if (minusValue + betValue < 0) {\n        alert(\"\\uCAC4?\");\n        return;\n    }\n    balance -= minusValue;\n    betValue += minusValue;\n    currentBalance.textContent = balance;\n    currentBet.textContent = betValue;\n}\nfunction restartGame() {\n    document.querySelector(\".bet-controller\").classList.toggle(\"hidden\");\n    document.querySelector(\".blackjack-start\").classList.toggle(\"hidden\");\n    document.querySelector(\".restart-button\").classList.toggle(\"hidden\");\n}\nfunction doubleBet() {\n    let betValue = parseInt(currentBet.textContent);\n    let balance = parseInt(currentBalance.textContent);\n    if (betValue > balance) {\n        alert(\"\\uB3C8\\uC774 \\uBD80\\uC871\\uD55C\\uB370\\uC694?\");\n        return;\n    }\n    balance -= betValue;\n    betValue *= 2;\n    playerHit();\n    currentBet.textContent = betValue;\n    currentBalance.textContent = balance;\n    dealerTurn();\n}\nfunction checkBlackJack(cardList) {\n    return calculateCardWeight(cardList) === 21;\n}\nfunction playerBlackJack() {\n    let prizeMoney = parseInt(currentBet.textContent);\n    let balance = parseInt(currentBalance.textContent);\n    balance += prizeMoney * 2.5;\n    currentBalance.textContent = balance;\n    alert(\"NICE BLACKJACK...\");\n}\nfunction begging() {\n    let balance = parseInt(currentBalance.textContent);\n    balance += 500;\n    currentBalance.textContent = balance;\n    alert(\"500 \\uB354 \\uB4DC\\uB838\\uC2B5\\uB2C8\\uB2E4\\n\\uB3C4\\uBC15\\uC911\\uB3C5 \\uC804\\uBB38\\uC0C1\\uB2F4 \\uAD6D\\uBC88\\uC5C6\\uC774 1336\");\n}\nfunction sleep(ms) {\n    const wakeUpTime = Date.now() + ms;\n    while(Date.now() < wakeUpTime);\n}\nfunction calculateCardWeight(hand) {\n    let cards1 = hand.getElementsByClassName(\"card\");\n    let totalWeight = 0;\n    for(let i = 0; i < cards1.length; i++){\n        let weightElement = cards1[i].getElementsByClassName(\"weight\")[0];\n        if (weightElement) totalWeight += parseInt(weightElement.textContent);\n    }\n    return totalWeight;\n}\n\n//# sourceMappingURL=folder.9848948a.js.map\n","const playbtn = document.querySelector(\".play-button\");\r\nconst playerCardList = document.querySelector(\".player-card-list\");\r\nconst dealerCardList = document.querySelector(\".dealer-card-list\");\r\nconst playerScore = document.querySelector(\".player-score\");\r\nconst dealerScore = document.querySelector(\".dealer-score\");\r\nconst currentBalance = document.querySelector(\".balance\");\r\nconst currentBet = document.querySelector(\".current-bet\");\r\n\r\nconst suits = [\"♠\", \"♥\", \"♦\", \"♣\"];\r\n//const values = [\"10\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\"];\r\nconst values = [\r\n  \"2\",\r\n  \"3\",\r\n  \"4\",\r\n  \"5\",\r\n  \"6\",\r\n  \"7\",\r\n  \"8\",\r\n  \"9\",\r\n  \"10\",\r\n  \"J\",\r\n  \"Q\",\r\n  \"K\",\r\n  \"A\",\r\n];\r\n\r\nfunction createDeck() {\r\n  let numberOfDecks = 6;\r\n  let deck = [];\r\n  for (let i = 0; i < values.length; i++) {\r\n    for (let j = 0; j < suits.length; j++) {\r\n      let weight = parseInt(values[i]);\r\n      if (values[i] == \"J\" || values[i] == \"Q\" || values[i] == \"K\") weight = 10;\r\n      if (values[i] == \"A\") weight = 11;\r\n      var card = { Value: values[i], Suit: suits[j], Weight: weight };\r\n      for (let k = 0; k < numberOfDecks; k++) deck.push(card);\r\n    }\r\n  }\r\n  deck = shuffleDeck(deck);\r\n  alert(\"셔플하겠습니다\");\r\n  return deck;\r\n}\r\n\r\nfunction shuffleDeck(deck) {\r\n  let shuffledDeck = [...deck];\r\n\r\n  for (let i = shuffledDeck.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [shuffledDeck[i], shuffledDeck[j]] = [shuffledDeck[j], shuffledDeck[i]];\r\n  }\r\n\r\n  return shuffledDeck;\r\n}\r\n\r\nlet playing = false;\r\ndocument.querySelector(\".play-button\").addEventListener(\"click\", startGame);\r\ndocument\r\n  .querySelector(\".blackjack-start\")\r\n  .addEventListener(\"click\", startBlackJack);\r\ndocument.getElementById(\"stay\").addEventListener(\"click\", dealerTurn);\r\ndocument.getElementById(\"hit\").addEventListener(\"click\", playerHit);\r\ndocument.querySelector(\"#plus-5\").addEventListener(\"click\", plusBet);\r\ndocument.querySelector(\"#plus-50\").addEventListener(\"click\", plusBet);\r\ndocument.querySelector(\"#plus-500\").addEventListener(\"click\", plusBet);\r\ndocument.querySelector(\"#minus-5\").addEventListener(\"click\", minusBet);\r\ndocument.querySelector(\"#minus-50\").addEventListener(\"click\", minusBet);\r\ndocument.querySelector(\"#minus-500\").addEventListener(\"click\", minusBet);\r\ndocument\r\n  .querySelector(\".restart-button\")\r\n  .addEventListener(\"click\", restartGame);\r\ndocument.querySelector(\"#double\").addEventListener(\"click\", doubleBet);\r\ndocument.querySelector(\"#hogu\").addEventListener(\"click\", begging);\r\nlet deck = [];\r\nlet playerCards = [];\r\nlet dealerCards = [];\r\nfunction startGame() {\r\n  deck = createDeck();\r\n  playbtn.classList.add(\"hidden\");\r\n  playing = true;\r\n  game();\r\n  document.querySelector(\".bet-controller\").classList.toggle(\"hidden\");\r\n}\r\n\r\nfunction game() {\r\n  bet();\r\n}\r\n\r\nfunction bet() {\r\n  document.querySelector(\".blackjack-start\").classList.toggle(\"hidden\");\r\n}\r\n\r\nfunction startBlackJack() {\r\n  document.querySelector(\".rules\").classList.toggle(\"hidden\");\r\n  document.querySelector(\".blackjack-start\").classList.toggle(\"hidden\");\r\n  document.querySelector(\".bet-controller\").classList.toggle(\"hidden\");\r\n  document.querySelector(\".game-controller\").classList.toggle(\"hidden\");\r\n  document.querySelector(\".player-card-display\").classList.toggle(\"hidden\");\r\n  initialCard();\r\n}\r\n\r\nfunction initialCard() {\r\n  document.querySelector(\".dealer-card-display\").classList.toggle(\"hidden\");\r\n  if (deck.length < 50) deck = createDeck();\r\n  hitCard(playerCards, playerCardList, playerScore);\r\n  updateScore(playerScore, playerCardList);\r\n  hitCard(playerCards, playerCardList, playerScore);\r\n  updateScore(playerScore, playerCardList);\r\n  hitCard(dealerCards, dealerCardList, dealerScore);\r\n  updateScore(dealerScore, dealerCardList);\r\n  if (checkBlackJack(playerCardList)) {\r\n    setTimeout(checkResults(true), 500);\r\n  }\r\n}\r\n\r\nfunction renderCard(card, hand) {\r\n  hand.appendChild(getCardUI(card));\r\n}\r\n\r\nfunction getCardUI(card) {\r\n  let el = document.createElement(\"div\");\r\n  el.className = \"card\";\r\n  let suit = document.createElement(\"div\");\r\n  suit.textContent = card.Suit;\r\n  el.appendChild(suit);\r\n  let value = document.createElement(\"div\");\r\n  value.textContent = card.Value;\r\n  value.className = \"value\";\r\n  el.appendChild(value);\r\n  let weight = document.createElement(\"div\");\r\n  weight.textContent = card.Weight;\r\n  weight.className = \"weight\";\r\n  weight.classList.add(\"hidden\");\r\n  el.appendChild(weight);\r\n  if (card.Suit === \"♦\" || card.Suit === \"♥\") el.classList.add(\"red-suit\");\r\n  return el;\r\n}\r\n\r\nfunction hitCard(playercards, playerlist, playerScore) {\r\n  let newCard = deck.pop();\r\n  if (parseInt(newCard.Weight) + calculateCardWeight(playerlist) > 21) {\r\n    let foundAceCard;\r\n    cards = playerlist.querySelectorAll(\".card\");\r\n    for (card of cards) {\r\n      if (card.querySelector(\".weight\").textContent == \"11\")\r\n        foundAceCard = card;\r\n    }\r\n    if (foundAceCard) {\r\n      foundAceCard.querySelector(\".weight\").textContent = 1;\r\n    }\r\n    if (!foundAceCard && newCard.Weight == 11) newCard.Weight = 1;\r\n  }\r\n  playercards.push(newCard);\r\n  renderCard(newCard, playerlist);\r\n}\r\n\r\nfunction updateScore(playerScore, cardList) {\r\n  let score = 0;\r\n  score = calculateCardWeight(cardList);\r\n  playerScore.textContent = score;\r\n}\r\n\r\nfunction playerHit() {\r\n  hitCard(playerCards, playerCardList, playerScore);\r\n  updateScore(playerScore, playerCardList);\r\n  if (parseInt(playerScore.textContent) > 21) {\r\n    setTimeout(500, checkResults());\r\n  }\r\n}\r\n\r\nasync function dealerTurn() {\r\n  async function takeTurn() {\r\n    if (\r\n      parseInt(dealerScore.textContent) >= 17 ||\r\n      parseInt(playerScore.textContent) > 21\r\n    ) {\r\n      return true;\r\n    }\r\n\r\n    hitCard(dealerCards, dealerCardList, dealerScore);\r\n    updateScore(dealerScore, dealerCardList);\r\n\r\n    await new Promise((resolve) => setTimeout(resolve, 1000));\r\n\r\n    await takeTurn();\r\n  }\r\n\r\n  await takeTurn();\r\n  checkResults();\r\n}\r\nfunction checkResults(isBlackJack = false) {\r\n  document.querySelector(\".game-controller\").classList.toggle(\"hidden\");\r\n  if (isBlackJack) {\r\n    setTimeout(playerBlackJack, 500);\r\n  } else if (parseInt(playerScore.textContent) > 21) {\r\n    setTimeout(dealerWin, 500);\r\n  } else if (\r\n    parseInt(dealerScore.textContent) > 21 ||\r\n    parseInt(dealerScore.textContent) < parseInt(playerScore.textContent)\r\n  ) {\r\n    setTimeout(playerWin, 500);\r\n  } else if (\r\n    parseInt(dealerScore.textContent) === parseInt(playerScore.textContent)\r\n  ) {\r\n    setTimeout(itsAPush, 500);\r\n  } else {\r\n    setTimeout(dealerWin, 500);\r\n  }\r\n  setTimeout(resetGame, 1000);\r\n}\r\n\r\nfunction playerWin() {\r\n  let prizeMoney = parseInt(currentBet.textContent);\r\n  let balance = parseInt(currentBalance.textContent);\r\n  balance += prizeMoney * 2;\r\n  currentBalance.textContent = balance;\r\n  alert(\"YOU WIN!\\n운이 좋군요?\");\r\n}\r\n\r\nfunction dealerWin() {\r\n  alert(\"YOU LOSE\\n블랙잭은 '실력게임' 입니다\");\r\n}\r\n\r\nfunction itsAPush() {\r\n  let prizeMoney = parseInt(currentBet.textContent);\r\n  let balance = parseInt(currentBalance.textContent);\r\n  balance += prizeMoney;\r\n  currentBalance.textContent = balance;\r\n  alert(\"PUSH(무승부)\\n놀라셨나요?\");\r\n}\r\n\r\nfunction resetGame() {\r\n  document.querySelector(\".player-card-display\").classList.toggle(\"hidden\");\r\n  document.querySelector(\".dealer-card-display\").classList.toggle(\"hidden\");\r\n  document.querySelector(\".restart-button\").classList.toggle(\"hidden\");\r\n  currentBet.textContent = 0;\r\n  playerScore.textContent = 0;\r\n  dealerScore.textContent = 0;\r\n  while (playerCardList.firstChild) {\r\n    playerCardList.removeChild(playerCardList.firstChild);\r\n  }\r\n  while (dealerCardList.firstChild) {\r\n    dealerCardList.removeChild(dealerCardList.firstChild);\r\n  }\r\n  playerCards = [];\r\n  dealerCards = [];\r\n}\r\n\r\nfunction plusBet(event) {\r\n  const button = event.target;\r\n  let balance = parseInt(currentBalance.textContent);\r\n  let plusValue = parseInt(button.textContent.replace(\"+\", \"\"));\r\n  let betValue = parseInt(currentBet.textContent);\r\n  if (balance < plusValue) {\r\n    alert(\"베팅 금액이 부족합니다\\n산와 산와 산와머니~\");\r\n    return;\r\n  }\r\n\r\n  balance -= plusValue;\r\n  betValue += plusValue;\r\n  currentBalance.textContent = balance;\r\n  currentBet.textContent = betValue;\r\n}\r\n\r\nfunction minusBet(event) {\r\n  const button = event.target;\r\n  let balance = parseInt(currentBalance.textContent);\r\n  let minusValue = parseInt(button.textContent);\r\n  let betValue = parseInt(currentBet.textContent);\r\n  if (minusValue + betValue < 0) {\r\n    alert(\"쫄?\");\r\n    return;\r\n  }\r\n  balance -= minusValue;\r\n  betValue += minusValue;\r\n  currentBalance.textContent = balance;\r\n  currentBet.textContent = betValue;\r\n}\r\n\r\nfunction restartGame() {\r\n  document.querySelector(\".bet-controller\").classList.toggle(\"hidden\");\r\n  document.querySelector(\".blackjack-start\").classList.toggle(\"hidden\");\r\n  document.querySelector(\".restart-button\").classList.toggle(\"hidden\");\r\n}\r\n\r\nfunction doubleBet() {\r\n  let betValue = parseInt(currentBet.textContent);\r\n  let balance = parseInt(currentBalance.textContent);\r\n\r\n  if (betValue > balance) {\r\n    alert(\"돈이 부족한데요?\");\r\n    return;\r\n  }\r\n\r\n  balance -= betValue;\r\n  betValue *= 2;\r\n  playerHit();\r\n  currentBet.textContent = betValue;\r\n  currentBalance.textContent = balance;\r\n  dealerTurn();\r\n}\r\n\r\nfunction checkBlackJack(cardList) {\r\n  return calculateCardWeight(cardList) === 21;\r\n}\r\n\r\nfunction playerBlackJack() {\r\n  let prizeMoney = parseInt(currentBet.textContent);\r\n  let balance = parseInt(currentBalance.textContent);\r\n  balance += prizeMoney * 2.5;\r\n  currentBalance.textContent = balance;\r\n  alert(\"NICE BLACKJACK...\");\r\n}\r\n\r\nfunction begging() {\r\n  let balance = parseInt(currentBalance.textContent);\r\n  balance += 500;\r\n  currentBalance.textContent = balance;\r\n  alert(\"500 더 드렸습니다\\n도박중독 전문상담 국번없이 1336\");\r\n}\r\n\r\nfunction sleep(ms) {\r\n  const wakeUpTime = Date.now() + ms;\r\n  while (Date.now() < wakeUpTime) {}\r\n}\r\n\r\nfunction calculateCardWeight(hand) {\r\n  let cards = hand.getElementsByClassName(\"card\");\r\n  let totalWeight = 0;\r\n\r\n  for (let i = 0; i < cards.length; i++) {\r\n    let weightElement = cards[i].getElementsByClassName(\"weight\")[0];\r\n    if (weightElement) {\r\n      totalWeight += parseInt(weightElement.textContent);\r\n    }\r\n  }\r\n\r\n  return totalWeight;\r\n}\r\n"],"names":["playbtn","document","querySelector","playerCardList","dealerCardList","playerScore","dealerScore","currentBalance","currentBet","suits","values","createDeck","deck","i","length","j","weight","parseInt","card1","Value","Suit","Weight","k","push","shuffleDeck","shuffledDeck","Math","floor","random","alert","addEventListener","classList","add","toggle","hitCard","playerCards","updateScore","dealerCards","calculateCardWeight","setTimeout","checkResults","getElementById","dealerTurn","playerHit","plusBet","minusBet","betValue","textContent","balance","playercards","playerlist","newCard","pop","foundAceCard","card","cards","querySelectorAll","renderCard","hand","el","suit","value","appendChild","createElement","className","cardList","score","takeTurn","Promise","resolve","isBlackJack","playerBlackJack","dealerWin","playerWin","itsAPush","resetGame","prizeMoney","firstChild","removeChild","event","button","target","plusValue","replace","minusValue","cards1","getElementsByClassName","totalWeight","weightElement"],"version":3,"file":"folder.9848948a.js.map"}